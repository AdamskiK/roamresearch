// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_outlierDetection_RCPPEXPORTS_H_GEN_
#define RCPP_outlierDetection_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace outlierDetection {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("outlierDetection", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("outlierDetection", "outlierDetection_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in outlierDetection");
            }
        }
    }

    inline NumericVector grubbs_test_cpp(NumericVector y, IntegerVector n, double alpha) {
        typedef SEXP(*Ptr_grubbs_test_cpp)(SEXP,SEXP,SEXP);
        static Ptr_grubbs_test_cpp p_grubbs_test_cpp = NULL;
        if (p_grubbs_test_cpp == NULL) {
            validateSignature("NumericVector(*grubbs_test_cpp)(NumericVector,IntegerVector,double)");
            p_grubbs_test_cpp = (Ptr_grubbs_test_cpp)R_GetCCallable("outlierDetection", "outlierDetection_grubbs_test_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_grubbs_test_cpp(Rcpp::wrap(y), Rcpp::wrap(n), Rcpp::wrap(alpha));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline IntegerVector sequential_grubbs_test_cpp(NumericVector in_vector, double max_outlier_pct, double alpha) {
        typedef SEXP(*Ptr_sequential_grubbs_test_cpp)(SEXP,SEXP,SEXP);
        static Ptr_sequential_grubbs_test_cpp p_sequential_grubbs_test_cpp = NULL;
        if (p_sequential_grubbs_test_cpp == NULL) {
            validateSignature("IntegerVector(*sequential_grubbs_test_cpp)(NumericVector,double,double)");
            p_sequential_grubbs_test_cpp = (Ptr_sequential_grubbs_test_cpp)R_GetCCallable("outlierDetection", "outlierDetection_sequential_grubbs_test_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sequential_grubbs_test_cpp(Rcpp::wrap(in_vector), Rcpp::wrap(max_outlier_pct), Rcpp::wrap(alpha));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<IntegerVector >(rcpp_result_gen);
    }

    inline DataFrame sequential_grubbs_test_cpp_df(DataFrame df, std::string var_in, std::string var_out, double max_outlier_pct, double alpha) {
        typedef SEXP(*Ptr_sequential_grubbs_test_cpp_df)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sequential_grubbs_test_cpp_df p_sequential_grubbs_test_cpp_df = NULL;
        if (p_sequential_grubbs_test_cpp_df == NULL) {
            validateSignature("DataFrame(*sequential_grubbs_test_cpp_df)(DataFrame,std::string,std::string,double,double)");
            p_sequential_grubbs_test_cpp_df = (Ptr_sequential_grubbs_test_cpp_df)R_GetCCallable("outlierDetection", "outlierDetection_sequential_grubbs_test_cpp_df");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sequential_grubbs_test_cpp_df(Rcpp::wrap(df), Rcpp::wrap(var_in), Rcpp::wrap(var_out), Rcpp::wrap(max_outlier_pct), Rcpp::wrap(alpha));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<DataFrame >(rcpp_result_gen);
    }

}

#endif // RCPP_outlierDetection_RCPPEXPORTS_H_GEN_
